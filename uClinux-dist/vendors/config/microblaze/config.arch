.EXPORT_ALL_VARIABLES:
############################################################################
#
#  A Generic Microblaze config.arch that can be included by other platforms
#  to reduce the number of places that need to be edited when something
#  common changes.  If you include this file you may provide:
#
#  CPUFLAGS            - cpu specific flags to pass to the compiler
#  VENDOR_CFLAGS       - vendor specific flags to pass to the compiler
#  DISABLE_XIP         - set this to 1 to disable XIP code
#  DISABLE_SHARED_LIBS - set this to 1 to disable shared libraries
#  DISABLE_MOVE_RODATA - set this to 1 to disable moving rodata to text
#  LOPT                - library optimisation flags
#  UOPT                - user optimisation flags
#
#  Note:  Many of these are still unsupported on Microblaze!
#
#  John Williams    <jwilliams@itee.uq.edu.au>
#  	based upon m68k version by 
#  David McCullough <davidm@snapgear.com>
#
############################################################################
#
# Generic settings
#

ifndef CONSOLE_BAUD_RATE
CONSOLE_BAUD_RATE = 9600
endif

ifeq ($(ROOTDIR)/modules,$(wildcard $(ROOTDIR)/modules))
EXTRA_MODULE_DIRS = $(ROOTDIR)/modules
endif

ifndef VERSIONPKG
#define VERSIONPKG 1.0.0
endif

ifndef VERSIONSTR
VERSIONSTR = $(CONFIG_VENDOR)/$(CONFIG_PRODUCT) Version $(VERSIONPKG)
endif

############################################################################
#
# The makefiles need to know how to do things in different contexts
# To save some pain we put it all here
#
# First settings we always want for all builds
#

# ARCH = kernel,  TARGET_ARCH = uClibc

ENDIAN        = big
MACHINE       = microblaze
ARCH          = microblaze
## Choose cross-compiler on whether or not we are tagetting MMU-full system
## ugly, but will do for now
#ifeq ($(CONFIG_MMU),)
#CROSS_COMPILE = mb-
#else
#CROSS_COMPILE = mb-
#endif

CROSS         = $(CROSS_COMPILE)
CONFIGURE_HOST = mb

CONFIG_UCLINUX=y

# If using local uClibc, we need ucfront
ifdef CONFIG_DEFAULTS_LIBC_UCLIBC
FORCE_UCFRONT=1
endif

# Default to not use ucfront, but user can override if they want
ifdef FORCE_UCFRONT
  CC        = ucfront-gcc $(CROSS_COMPILE)gcc $(CPUFLAGS)
  CXX       = ucfront-g++ $(CROSS_COMPILE)g++ $(CPUFLAGS)
  LD        = ucfront-ld $(CROSS_COMPILE)ld
else
  CC        = $(CROSS_COMPILE)gcc $(CPUFLAGS)
  CXX       = $(CROSS_COMPILE)g++ $(CPUFLAGS)
  LD        = $(CROSS_COMPILE)ld
endif
AS        = $(CROSS_COMPILE)as $(CPUFLAGS)
AR        = $(CROSS_COMPILE)ar
OBJCOPY   = $(CROSS_COMPILE)objcopy
RANLIB    = $(CROSS_COMPILE)ranlib
ELF2FLT   = $(CROSS_COMPILE)elf2flt
STRIPTOOL = $(CROSS_COMPILE)strip
STRIP     = $(STRIPTOOL)

UCLINUX_BUILD_SET = 0					# have we set a special config below

# Pull in common definitions
include $(ROOTDIR)/vendors/config/common/config.arch

# These can be used by configure.
# Either configure $(CONFIGURE_OPTS)
# or     configure --host=$(TARGETARCH) --build=$(HOSTARCH) --target=$(TARGETARCH)
#
TARGETARCH    := microblaze-linux
HOSTARCH      := $(shell sh $(ROOTDIR)/tools/config.guess)
CONFIGURE_OPTS := --host=$(TARGETARCH) --build=$(HOSTARCH) --target=$(TARGETARCH)


ifndef DISABLE_SHARED_LIBS
  ifeq ($(CONFIG_BINFMT_SHARED_FLAT),y)
	BUILD_SHARED = 1
  endif
else
  CONFIGURE_OPTS += --disable-shared
endif

# Use the various processor config options to determine special
# compiler flags
# this is common to both apps and libs

# Clear the XILINX_EDK variable - it confuses mb-gcc.. ugh
XILINX_EDK=

# What CPU vesion are we building for, and crack it open
# as major.minor.rev
CPU_VER=$(subst ",,$(CONFIG_XILINX_MICROBLAZE0_HW_VER) )
CPU_MAJOR=$(shell echo $(CPU_VER) | cut -d '.' -f 1)
CPU_MINOR=$(shell echo $(CPU_VER) | cut -d '.' -f 2)
CPU_REV=$(shell echo $(CPU_VER) | cut -d '.' -f 3)

# Work out HW multipler support.  This is icky.
# 1. Spartan2 has no HW multiplers.
# 2. MicroBlaze v3.x always uses them, except in Spartan 2
# 3. All other FPGa/CPU ver combos, we can trust the CONFIG_ settings
ifeq (,$(findstring spartan2,$(CONFIG_XILINX_MICROBLAZE0_FAMILY)))
  ifeq ($(CPU_MAJOR),3)
    ARCH_CPUFLAGS-1 += -mno-xl-soft-mul
  else
    # USE_HW_MUL can be 0, 1, or 2, defining a heirarchy of HW Mul support.
    #ARCH_CPUFLAGS-$(subst 1,,$(CONFIG_XILINX_MICROBLAZE0_USE_HW_MUL)) += -mxl-multiply-high
    ARCH_CPUFLAGS-$(CONFIG_XILINX_MICROBLAZE0_USE_HW_MUL) += -mno-xl-soft-mul
  endif
endif

ARCH_CPUFLAGS-$(CONFIG_XILINX_MICROBLAZE0_USE_DIV) += -mno-xl-soft-div
ARCH_CPUFLAGS-$(CONFIG_XILINX_MICROBLAZE0_USE_BARREL) += -mxl-barrel-shift
ARCH_CPUFLAGS-$(CONFIG_XILINX_MICROBLAZE0_USE_PCMP) += -mxl-pattern-compare
#ARCH_CPUFLAGS-$(CONFIG_XILINX_MICROBLAZE0_USE_FPU) += -mhard-float

ifeq ($(CONFIG_XILINX_MICROBLAZE0_USE_FPU),0)
  ARCH_CPUFLAGS-1 += -msoft-float
else
  ARCH_CPUFLAGS-$(CONFIG_XILINX_MICROBLAZE0_USE_FPU) += -mhard-float
endif

# Pass in the CPU version to get a nice optimised compile
ARCH_CPUFLAGS-1 += -mcpu=v$(subst ",,$(CONFIG_XILINX_MICROBLAZE0_HW_VER))

ARCH_CPUFLAGS := $(ARCH_CPUFLAGS-1)
ARCH_CPUFLAGS += $(ARCH_CPUFLAGS-2)

############################################################################
#
# General purpose lib building rules,  uClibc.config uses these when
# possible
#

ifdef UCLINUX_BUILD_LIB

  ifdef CONFIG_LIB_DEBUG
	CFLAGS  :=  $(if $(LOPT),$(LOPT),-O1) -g
  else
	CFLAGS  :=  $(if $(LOPT),$(LOPT),-O1) -g -fomit-frame-pointer #-O2
  endif
	CFLAGS  += -pipe
	CFLAGS  += -fno-common -fno-builtin -Wall #-Werror
	CFLAGS  += $(ARCH_CPUFLAGS) $(VENDOR_CFLAGS) -DEMBED

	# If we aren't using UCFRONT, then make sure that the local include 
	# and lib paths are still set
  ifndef FORCE_UCFRONT
	CFLAGS += -I$(ROOTDIR) -I$(ROOTDIR)/include
	LDFLAGS += -L$(ROOTDIR)/lib
  endif

  ifdef BUILD_SHARED
	CFLAGS  += -mid-shared-library
  else
	ifndef DISABLE_XIP
	  CFLAGS  += -msep-data
	endif
  endif

	# don't want all the CFLAGS for uClibc/Config
	ARCH_CFLAGS := $(ARCH_CPUFLAGS) $(CFLAGS)

	CFLAGS  += -Dlinux -D__linux__ -Dunix
  ifeq ($(CONFIG_MMU),)
	CFLAGS  += -D__uClinux__
  endif

  ifeq ($(CONFIG_MMU),)
  ifdef FORCE_UCFRONT
	LDFLAGS += -Wl,-elf2flt
  endif
  endif

	CXXFLAGS = $(CFLAGS) 
	CXXSUP :=

  ifndef DISABLE_MOVE_RODATA
  	LDFLAGS += -Wl,-move-rodata
  endif

	UCLINUX_BUILD_SET=1
endif

############################################################################
#
# Settings for building user apps
#

ifdef UCLINUX_BUILD_USER

  ifdef BUILD_SHARED
	LIBC          = -Wl,-R,$(ROOTDIR)/lib/libc.gdb $(SLIBC)
  endif
  ifdef CONFIG_USER_DEBUG
	CFLAGS  :=  $(if $(UOPT),$(UOPT),-O1) -g
  else
	CFLAGS  :=  $(if $(UOPT),$(UOPT),-Os) -g -fomit-frame-pointer
  endif

	CFLAGS  += -pipe
	CFLAGS  += -fno-common -fno-builtin -Wall #-Werror
	CFLAGS  += $(ARCH_CPUFLAGS) $(VENDOR_CFLAGS) -DEMBED

	# If we aren't using UCFRONT, then make sure that the local include 
	# and lib paths are still set
  ifndef FORCE_UCFRONT
	CFLAGS += -I$(ROOTDIR) -I$(ROOTDIR)/include
	LDFLAGS += -L$(ROOTDIR)/lib
	CFLAGS += -I$(ROOTDIR)/include
  endif

	# don't want all the CFLAGS for uClibc/Config
	ARCH_CFLAGS := $(CFLAGS)

	CFLAGS  += -Dlinux -D__linux__ -Dunix
  ifeq ($(CONFIG_MMU),)
	CFLAGS  += -D__uClinux__
  endif
	CFLAGS  += -DLINUX

	CXXFLAGS = $(CFLAGS) 
	CXXSUP :=

	# Make sure arch cpu flags are passed to linker, to get right version
	# of multilib'd C libraries (noMMU/uClibc only)
  ifeq ($(CONFIG_MMU),)
	LDFLAGS += $(ARCH_CPUFLAGS)
	CXX_LDFLAGS += $(ARCH_CPUFLAGS)
  endif

  ifeq ($(CONFIG_MMU),)
  ifdef FORCE_UCFRONT
	LDFLAGS += -Wl,-elf2flt
	CXX_LDFLAGS += -Wl,-elf2flt
  endif
  endif

  ifndef FLTFLAGS
	FLTFLAGS :=
  endif
	export FLTFLAGS

	# for anyone still using it
	CONVERT = /bin/true

	UCLINUX_BUILD_SET=1
endif

############################################################################
#
# fall through,  do other config options perhaps
#

ifeq ($(UCLINUX_BUILD_SET),1)
	EXTRA_CFLAGS := $(CPUFLAGS)

	CXXLIBS = $(LIBSTDCPP) $(CXXSUP)

	LDLIBS = $(LIBBIND)
endif

############################################################################
