/*	Copyright (C) 2004 Garrett A. Kajmowicz

	This file is part of the uClibc++ Library.

	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.

	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.

	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

#include <basic_definitions>
#include <char_traits>
#include <string.h>
#include <func_exception>
#include <memory>
#include <vector>


#ifdef __UCLIBCXX_HAS_WCHAR__
#include <cwchar>
#include <cwctype>
#endif

#ifndef __HEADER_STD_STRING
#define __HEADER_STD_STRING 1

#pragma GCC visibility push(default)

namespace std{

	//Basic basic_string

	template<class Ch, class Tr = char_traits<Ch>, class A = allocator<Ch> > class basic_string;

	typedef basic_string<char> string;
	#ifdef __UCLIBCXX_HAS_WCHAR__
	typedef basic_string<wchar_t> wstring;
	#endif



//template<class Ch, class Tr = char_traits<Ch>, class A = allocator<Ch> > class _UCXXEXPORT basic_string
template<class Ch, class Tr, class A> class basic_string
	: public std::vector<Ch>
{
public:
	typedef Tr traits_type;
	typedef typename Tr::char_type value_type;
	typedef allocator<Ch> allocator_type;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;

	typedef Ch& reference;
	typedef const Ch& const_reference;
	typedef Ch* pointer;
	typedef const Ch* const_pointer;

	typedef typename vector<Ch>::iterator iterator;
	typedef typename vector<Ch>::const_iterator const_iterator;

	typedef typename vector<Ch>::reverse_iterator reverse_iterator;
	typedef typename vector<Ch>::const_reverse_iterator const_reverse_iterator;

	static const size_type npos = (size_type)-1;

	explicit _UCXXEXPORT basic_string() : vector<Ch>(){ return; }

	_UCXXEXPORT basic_string(const basic_string& str, size_type pos = 0, size_type n = npos);	//Below

	_UCXXEXPORT basic_string(const Ch* s, size_type n)
		: vector<Ch>(s, (n == npos) ? __throw_out_of_range(), 0 : n)
	{
	}

	_UCXXEXPORT basic_string(const Ch* s);		//Below
	
	_UCXXEXPORT basic_string(size_type n, Ch c)
		: vector<Ch>(n, c)
	{
	}

	template<class InputIterator> _UCXXEXPORT basic_string(InputIterator begin, InputIterator end)
		:vector<Ch>(begin, end)
	{
		
	}

	_UCXXEXPORT ~basic_string() {
		return;
	}

	_UCXXEXPORT basic_string& operator=(const basic_string& str);	//Below

	_UCXXEXPORT basic_string& operator=(const Ch* s){
		vector<Ch>::clear();
		if(s!=0){
			size_type len = Tr::length(s);
			resize(len);
			Tr::copy( vector<Ch>::m_data, s, len);
		}
		return *this;
	}

	_UCXXEXPORT basic_string& operator=(Ch c){
		vector<Ch>::clear();
		vector<Ch>::push_back(c);
		return *this;
	}

	inline _UCXXEXPORT size_type length() const { return vector<Ch>::size(); }

	void _UCXXEXPORT resize(size_type n, Ch c = Ch()){
		vector<Ch>::resize(n, c);
	}

	_UCXXEXPORT basic_string& operator+=(const basic_string& str){
		return append(str);
	}

	_UCXXEXPORT basic_string& operator+=(const Ch * s){
		return append(s);
	}

	_UCXXEXPORT basic_string& operator+=(Ch c){
		vector<Ch>::push_back(c);
		return *this;
	}

	_UCXXEXPORT basic_string& append(const basic_string& str){
		size_t temp = vector<Ch>::elements;
		resize(vector<Ch>::elements + str.elements);
		Tr::copy( vector<Ch>::m_data + temp, str.vector<Ch>::m_data, str.elements);

		return *this;
	}

	_UCXXEXPORT basic_string& append(const basic_string& str, size_type pos, size_type n){
		if(pos > str.size()){
			__throw_out_of_range();
		}

		size_type rlen = str.elements - pos;
		if(rlen > n){
			rlen = n;
		}
		if(vector<Ch>::elements > npos - rlen){
			__throw_length_error();
		}
		size_t temp = vector<Ch>::elements;
		resize(vector<Ch>::elements + rlen);
		Tr::copy( vector<Ch>::m_data + temp, str.vector<Ch>::m_data + pos, rlen);
		return *this;
	}
		
	_UCXXEXPORT basic_string& append(const Ch* s, size_type n){
		size_t temp = vector<Ch>::elements;
		resize(vector<Ch>::elements + n);
		Tr::copy( vector<Ch>::m_data + temp, s, n);
		return *this;
	}

	_UCXXEXPORT basic_string& append(const Ch* s){
		size_type strLen = Tr::length(s);
		size_t temp = vector<Ch>::elements;
		resize(vector<Ch>::elements + strLen);
		Tr::copy( vector<Ch>::m_data + temp, s, strLen);
		return *this;
	}

	_UCXXEXPORT basic_string& append(size_type n, Ch c){
		vector<Ch>::resize(vector<Ch>::elements + n, c);
		return *this;
	}

	_UCXXEXPORT basic_string& assign(const basic_string& str){
		operator=(str);
		return *this;
	}

	_UCXXEXPORT basic_string& assign(const basic_string& str, size_type pos, size_type n){
		if(pos > str.elements){
			__throw_out_of_range();
		}
		size_type r = str.elements - pos;
		if(r > n){
			r = n;
		}
		resize(r);
		Tr::copy(vector<Ch>::m_data, str.vector<Ch>::m_data + pos, r);
		return *this;
	}

	_UCXXEXPORT basic_string& assign(const Ch* s, size_type n){
		resize(n);
		Tr::copy(vector<Ch>::m_data, s, n);
		return *this;
	}

	_UCXXEXPORT basic_string& assign(const Ch* s){
		size_type len = Tr::length(s);
		return assign(s, len);
	}

	_UCXXEXPORT basic_string& assign(size_type n, Ch c){
		vector<Ch>::clear();
		vector<Ch>::resize(n, Ch() );
		return *this;
	}
        
        _UCXXEXPORT basic_string& assign(char* first, char* last){
                return assign(first, ((last - first) + 1));
        }

        _UCXXEXPORT basic_string& assign(const char* first, const char* last){
                return assign(first, ((last - first) + 1));
        }

	template<class InputIterator> _UCXXEXPORT basic_string& assign(InputIterator first, InputIterator last){
		vector<Ch>::resize(0, Ch());
		while (first != last){
			append(*first);
			++first;
		}
		return *this;
	}
	
	_UCXXEXPORT basic_string& insert(size_type pos1, const basic_string& str, size_type pos2=0, size_type n=npos){
		if(pos1 > vector<Ch>::elements || pos2 > str.elements){
			__throw_out_of_range();
		}
		size_type r = str.elements - pos2;
		if( r > n){
			r = n;
		}
		if(vector<Ch>::elements > npos - r){
			__throw_length_error();
		}
		size_type temp = vector<Ch>::elements;
		resize(vector<Ch>::elements + r);
		Tr::move(vector<Ch>::m_data + pos1 + r, vector<Ch>::m_data + pos1, temp - pos1);
		Tr::copy(vector<Ch>::m_data + pos1, str.vector<Ch>::m_data + pos2, r);
		return *this;
	}

	_UCXXEXPORT basic_string& insert(size_type pos, const Ch* s, size_type n){
		if(pos > vector<Ch>::elements){
			__throw_out_of_range();
		}
		if(vector<Ch>::elements > npos - n){
			__throw_length_error();
		}
		size_type temp = vector<Ch>::elements;
		resize(vector<Ch>::elements + n);
		Tr::move(vector<Ch>::m_data + pos + n, vector<Ch>::m_data + pos, temp - pos);
		Tr::copy(vector<Ch>::m_data + pos, s, n);
		return *this;
	}

	inline _UCXXEXPORT basic_string& insert(size_type pos, const Ch* s){
		size_type len = Tr::length(s);
		return insert(pos, s, len);
	}

	_UCXXEXPORT basic_string& insert(size_type pos, size_type n, Ch c){
		if(pos > vector<Ch>::elements){
			__throw_out_of_range();
		}
		if(vector<Ch>::elements > npos - n){
			__throw_length_error();
		}
		size_type temp = vector<Ch>::elements;
		resize(vector<Ch>::elements + n);
		Tr::move(vector<Ch>::m_data + pos + n, vector<Ch>::m_data + pos, temp - pos);
		Tr::assign(vector<Ch>::m_data + pos, n, c);
		return *this;
	}

	using vector<Ch>::insert;
//	void insert(iterator p, size_type n, charT c);
//	template<class InputIterator> void insert(iterator p, InputIterator first, InputIterator last);

	_UCXXEXPORT basic_string& erase(size_type pos = 0, size_type n = npos){
		size_type xlen = vector<Ch>::elements - pos;

		if(xlen > n){
			xlen = n;
		}
		size_type temp = vector<Ch>::elements;

		Tr::move(vector<Ch>::m_data + pos, vector<Ch>::m_data + pos + xlen, temp - pos - xlen);
		resize(temp - xlen);
		return *this;
	}

	_UCXXEXPORT iterator erase(iterator position){
		if(position == vector<Ch>::end()){
			return position;
		}

		++position;

		iterator temp = position;

		while(position != vector<Ch>::end()){
			*(position-1) = *position;
			++position;
		}
		vector<Ch>::pop_back();
		return temp;
	}

	_UCXXEXPORT iterator erase(iterator first, iterator last){
		size_t count = last - first;

		iterator temp = last;

		while(last != vector<Ch>::end()){
			*(last - count) = *last;
			++last;
		}

		resize(	vector<Ch>::elements-count);

		return temp;
	}

	_UCXXEXPORT basic_string&
		replace(size_type pos1, size_type n1, const basic_string& str, size_type pos2=0, size_type n2=npos)
	{
		if(pos1 > vector<Ch>::elements){
			__throw_out_of_range();
		}
		size_type xlen = vector<Ch>::elements - pos1;
		if(xlen >  n1){
			xlen = n1;
		}
		size_type rlen = str.elements - pos2;
		if(rlen > n2){
			rlen = n2;
		}
		if((vector<Ch>::elements - xlen) >= (npos - rlen)){
			__throw_length_error();
		}

		size_t temp = vector<Ch>::elements;

		if(rlen > xlen){		//Only if making larger
			resize(temp - xlen + rlen);
		}

		//Final length = vector<Ch>::elements - xlen + rlen
		//Initial block is of size pos1
		//Block 2 is of size len

		Tr::move(vector<Ch>::m_data + pos1 + rlen, vector<Ch>::m_data + pos1 + xlen, temp - pos1 - xlen);
		Tr::copy(vector<Ch>::m_data + pos1, str.vector<Ch>::m_data + pos2, rlen);
		resize(temp - xlen + rlen);
		return *this;
	}

	_UCXXEXPORT basic_string& replace(size_type pos, size_type n1, const Ch* s, size_type n2){
		return replace(pos,n1,basic_string<Ch,Tr>(s,n2));
		
	}

	inline _UCXXEXPORT basic_string& replace(size_type pos, size_type n1, const Ch* s){
		return replace(pos,n1,basic_string<Ch,Tr>(s));
	}

	_UCXXEXPORT basic_string& replace(size_type pos, size_type n1, size_type n2, Ch c){
		return replace(pos,n1,basic_string<Ch, Tr>(n2,c));
	}
//	_UCXXEXPORT basic_string& replace(iterator i1, iterator i2, const basic_string& str);
//	_UCXXEXPORT basic_string& replace(iterator i1, iterator i2, const Ch* s, size_type n);
//	_UCXXEXPORT basic_string& replace(iterator i1, iterator i2, const Ch* s);
//	_UCXXEXPORT basic_string& replace(iterator i1, iterator i2, size_type n, Ch c);
/*	template<class InputIterator> _UCXXEXPORT basic_string& replace(iterator i1, iterator i2,
		InputIterator j1, InputIterator j2);*/

	size_type _UCXXEXPORT copy(Ch* s, size_type n, size_type pos = 0) const{
		if(pos > vector<Ch>::elements){
			__throw_out_of_range();
		}
		size_type r = vector<Ch>::elements - pos;
		if(r > n){
			r = n;
		}
		Tr::copy(s, vector<Ch>::m_data + pos, r);
		return r;
	}

	_UCXXEXPORT void swap(basic_string<Ch,Tr>& s){
		//Data pointers

		vector<Ch>::swap(s);
	}

	_UCXXEXPORT const Ch* c_str() const{
		const_cast<basic_string<Ch,Tr> *>(this)->reserve(vector<Ch>::elements+1);
		vector<Ch>::m_data[vector<Ch>::elements] = 0;	//Add 0 at the end
		return vector<Ch>::m_data;
	}

	_UCXXEXPORT const Ch* data() const{
		return vector<Ch>::m_data;
	}
	_UCXXEXPORT allocator_type get_allocator() const{
		return vector<Ch>::a;
	}

	_UCXXEXPORT size_type find (const basic_string& str, size_type pos = 0) const;	//Below

	_UCXXEXPORT size_type find (const Ch* s, size_type pos, size_type n) const{
		return find(basic_string<Ch, Tr>(s,n), pos);
	}
	_UCXXEXPORT size_type find (const Ch* s, size_type pos = 0) const{
		return find(basic_string<Ch, Tr>(s), pos);
	}
	_UCXXEXPORT size_type find (Ch c, size_type pos = 0) const{
		for(size_type i = pos; i < length(); ++i){
			if(vector<Ch>::operator[](i) == c){
				return i;
			}
		}
		return npos;
	}
	_UCXXEXPORT size_type rfind(const basic_string& str, size_type pos = npos) const{
		if(pos >= length()){
			pos = length();
		}
		for(size_type i = pos; i > 0; --i){
			if(str == substr(i-1, str.length())){
				return i-1;
			}
		}
		return npos;
	}
	_UCXXEXPORT size_type rfind(const Ch* s, size_type pos, size_type n) const{
		return rfind(basic_string<Ch, Tr>(s,n),pos);
	}
	_UCXXEXPORT size_type rfind(const Ch* s, size_type pos = npos) const{
		return rfind(basic_string<Ch, Tr>(s),pos);
	}
	_UCXXEXPORT size_type rfind(Ch c, size_type pos = npos) const{
		return rfind(basic_string<Ch, Tr>(1,c),pos);
	}

	_UCXXEXPORT size_type find_first_of(const basic_string& str, size_type pos = 0) const{
		for(size_type i = pos; i < length(); ++i){
			for(size_type j = 0; j < str.length() ; ++j){
				if( Tr::eq(str[j], vector<Ch>::operator[](i)) ){
					return i;
				}
			}
		}
		return npos;
	}

	_UCXXEXPORT size_type find_first_of(const Ch* s, size_type pos, size_type n) const{
		return find_first_of(basic_string<Ch, Tr>(s,n),pos);
	}
	_UCXXEXPORT size_type find_first_of(const Ch* s, size_type pos = 0) const{
		return find_first_of(basic_string<Ch, Tr>(s),pos);
	}
	_UCXXEXPORT size_type find_first_of(Ch c, size_type pos = 0) const{
		for(size_type i = pos; i< length(); ++i){
			if( Tr::eq(vector<Ch>::operator[](i), c) ){
				return i;
			}
		}
		return npos;
	}

	_UCXXEXPORT size_type find_last_of (const basic_string& str, size_type pos = npos) const{
		if(pos > length()){
			pos = length();
		}
		for(size_type i = pos; i >0 ; --i){
			for(size_type j = 0 ; j < str.length(); ++j){
				if( Tr::eq(vector<Ch>::operator[](i-1), str[j]) ){
					return i-1;
				}
			}
		}
		return npos;
	}
	_UCXXEXPORT size_type find_last_of (const Ch* s, size_type pos, size_type n) const{
		return find_last_of(basic_string<Ch, Tr>(s,n),pos);
	}
	_UCXXEXPORT size_type find_last_of (const Ch* s, size_type pos = npos) const{
		return find_last_of(basic_string<Ch, Tr>(s),pos);
	}
	_UCXXEXPORT size_type find_last_of (Ch c, size_type pos = npos) const{
		if(pos > length()){
			pos = length();
		}
		for(size_type i = pos; i >0 ; --i){
			if( Tr::eq(vector<Ch>::operator[](i-1), c) ){
				return i-1;
			}
		}
		return npos;
	}

	_UCXXEXPORT size_type find_first_not_of(const basic_string& str, size_type pos = 0) const{
		bool foundCharacter;
		for(size_type i = pos; i < length(); ++i){
			foundCharacter = false;
                        for(size_type j = 0; j < str.length() ; ++j){
                                if( Tr::eq(str[j], vector<Ch>::operator[](i)) ){
					foundCharacter = true;
                                }
                        }
			if(foundCharacter == false){
				return i;
			}
                }
		return npos;
	}

	_UCXXEXPORT size_type find_first_not_of(const Ch* s, size_type pos, size_type n) const{
		return find_first_not_of(basic_string<Ch, Tr>(s,n),pos);
	}
	_UCXXEXPORT size_type find_first_not_of(const Ch* s, size_type pos = 0) const{
		return find_first_not_of(basic_string<Ch, Tr>(s),pos);
	}
	_UCXXEXPORT size_type find_first_not_of(Ch c, size_type pos = 0) const{
		for(size_type i = pos; i < length() ; ++i){
			if(vector<Ch>::operator[](i) != c){
				return i;
			}
		}
		return npos;
	}
	_UCXXEXPORT size_type find_last_not_of (const basic_string& str, size_type pos = npos) const{
		size_type xpos(length() - 1);
		if(xpos > pos){
			xpos = pos;
		}
		
		while(xpos != npos && npos != str.find_first_of(vector<Ch>::at(xpos))){
			--xpos;
		}

		return xpos;
	}

	_UCXXEXPORT size_type find_last_not_of (const Ch* s, size_type pos, size_type n) const{
		return find_last_not_of(basic_string<Ch, Tr>(s,n),pos);
	}
	_UCXXEXPORT size_type find_last_not_of (const Ch* s, size_type pos = npos) const{
		return find_last_not_of(basic_string<Ch, Tr>(s),pos);
	}
	_UCXXEXPORT size_type find_last_not_of (Ch c, size_type pos = npos) const{
		size_type xpos(length() - 1);
		if(xpos > pos){
			xpos = pos;
		}
		while(xpos != npos && Tr::eq(vector<Ch>::at(xpos), c)){
			--xpos;
		}
		return xpos;

	}

	_UCXXEXPORT basic_string substr(size_type pos = 0, size_type n = npos) const;

	_UCXXEXPORT int compare(const basic_string& str) const{
		size_type rlen = vector<Ch>::elements;
		if(rlen >  str.elements){
			rlen = str.elements;
		}
		int retval = Tr::compare(vector<Ch>::m_data, str.vector<Ch>::m_data, rlen);
		if(retval == 0){
			if(vector<Ch>::elements < str.elements){
				retval = -1;
			}
			if(vector<Ch>::elements > str.elements){
				retval = 1;
			}
		}
		return retval;
	}

	_UCXXEXPORT int compare(size_type pos1, size_type n1, const basic_string& str,
		size_type pos2=0, size_type n2=npos) const{
		size_type len1 = vector<Ch>::elements - pos1;
		if(len1 > n1){
			len1 = n1;
		}
		size_type len2 = str.vector<Ch>::elements - pos2;
		if(len2 > n2){
			len2 = n2;
		}
		size_type rlen = len1;
		if(rlen > len2){
			rlen = len2;
		}
		int retval = Tr::compare(vector<Ch>::m_data + pos1, str.vector<Ch>::m_data + pos2, rlen);
		if(retval == 0){
			if(len1 < len2){
				retval = -1;
			}
			if(len1 > len2){
				retval = 1;
			}
		}
		return retval;
	}

	_UCXXEXPORT int compare(const Ch* s) const{
		size_type slen = Tr::length(s);
		size_type rlen = slen;
		if(rlen > vector<Ch>::elements){
			rlen=vector<Ch>::elements;
		}
		int retval = Tr::compare(vector<Ch>::m_data, s, rlen);
		if(retval==0){
			if(vector<Ch>::elements < slen){
				retval = -1;
			}
			if(vector<Ch>::elements > slen){
				retval = 1;
			}
		}
		return retval;
	}

	_UCXXEXPORT int compare(size_type pos1, size_type n1, const Ch* s, size_type n2 = npos) const{
		size_type len1 = vector<Ch>::elements - pos1;
		if(len1 > n1){
			len1 = n1;
		}
		size_type slen = Tr::length(s);
		size_type len2 = slen;
		if(len2 > n2){
			len2 = n2;
		}
		size_type rlen = len1;
		if(rlen > len2){
			rlen = len2;
		}
		int retval  = Tr::compare(vector<Ch>::m_data + pos1, s, rlen);
		if(retval == 0){
			if(len1 < len2){
				retval = -1;
			}
			if(len1 > len2){
				retval = 1;
			}
		}
		return retval;
	}

};


//Functions

template<class Ch,class Tr,class A> _UCXXEXPORT basic_string<Ch,Tr,A>::basic_string(const Ch* s)
	: vector<Ch>(s, (s!=0) ? Tr::length(s) : 0)
{
}

template<class Ch,class Tr,class A> _UCXXEXPORT basic_string<Ch,Tr,A>::
	basic_string(const basic_string& str, size_type pos, size_type n)
	: vector<Ch>()
{
	if(pos>str.size()){
		__throw_out_of_range();
	}
	size_type rlen = str.size() - pos;
	if( rlen > n){
		rlen = n;
	}
	resize(rlen);
	Tr::copy(vector<Ch>::m_data, str.vector<Ch>::m_data + pos, vector<Ch>::elements);
}

template<class Ch,class Tr,class A> _UCXXEXPORT basic_string<Ch,Tr,A>&
	basic_string<Ch,Tr,A>::operator=(const basic_string<Ch,Tr,A> & str)
{
	if(&str == this){	//Check if we are doing a=a 
		return *this;
	}
	vector<Ch>::clear();
	resize(str.elements);
	Tr::copy( vector<Ch>::m_data, str.vector<Ch>::m_data, str.elements);
	return *this;
}


template<class Ch,class Tr,class A> _UCXXEXPORT typename basic_string<Ch,Tr,A>::size_type
	basic_string<Ch,Tr,A>::find (const basic_string<Ch,Tr,A>& str, size_type pos) const
{
	if(str.length() > length()){
		return npos;
	}
	size_type max_string_start = 1 + length() - str.length();
	for(size_type i = pos; i < max_string_start; ++i){
		if(str == substr(i, str.length())){
			return i;
		}
	}
	return npos;
}


template<class Ch,class Tr,class A>
	_UCXXEXPORT basic_string<Ch, Tr, A> basic_string<Ch,Tr,A>::substr(size_type pos, size_type n) const
{
	if(pos > vector<Ch>::elements){
		__throw_out_of_range();
	}
	size_type rlen = vector<Ch>::elements - pos;
	if(rlen > n){
		rlen = n;
	}
	return basic_string<Ch,Tr,A>(vector<Ch>::m_data + pos,rlen);
}




#ifdef __UCLIBCXX_EXPAND_STRING_CHAR__
#ifndef __UCLIBCXX_COMPILE_STRING__

#ifdef __UCLIBCXX_EXPAND_CONSTRUCTORS_DESTRUCTORS__

	template <> _UCXXEXPORT string::basic_string();
	template <> _UCXXEXPORT string::basic_string(size_type n, char c);
	template <> _UCXXEXPORT string::basic_string(const char* s);
	template <> _UCXXEXPORT string::basic_string(const basic_string& str, size_type pos, size_type n);
	template <> _UCXXEXPORT string::~basic_string();

#endif

	template <> _UCXXEXPORT string & string::append(const char * s, size_type n);


	template <> _UCXXEXPORT string::size_type string::find(const string & str, size_type pos) const;
	template <> _UCXXEXPORT string::size_type string::find(const char* s, size_type pos) const;
	template <> _UCXXEXPORT string::size_type string::find (char c, size_type pos) const;

	template <> _UCXXEXPORT string::size_type string::rfind(const string & str, size_type pos) const;
	template <> _UCXXEXPORT string::size_type string::rfind(char c, size_type pos) const;
	template <> _UCXXEXPORT string::size_type string::rfind(const char* s, size_type pos) const;

	template <> _UCXXEXPORT string::size_type string::find_first_of(const string &, size_type) const;
	template <> _UCXXEXPORT string::size_type string::find_first_of(const char *, size_type pos, size_type n) const;
	template <> _UCXXEXPORT string::size_type string::find_first_of(const char*, size_type pos) const;
	template <> _UCXXEXPORT string::size_type string::find_first_of(char c, size_type pos) const;

	template <> _UCXXEXPORT string::size_type string::find_last_of (const string & , size_type pos) const;
	template <> _UCXXEXPORT string::size_type string::find_last_of (const char* s, size_type pos, size_type n) const;
	template <> _UCXXEXPORT string::size_type string::find_last_of (const char* s, size_type pos) const;
	template <> _UCXXEXPORT string::size_type string::find_last_of (char c, size_type pos) const;

	template <> _UCXXEXPORT string::size_type string::find_first_not_of(const string &, size_type) const;
	template <> _UCXXEXPORT string::size_type string::find_first_not_of(const char*, size_type, size_type) const;
	template <> _UCXXEXPORT string::size_type string::find_first_not_of(const char*, size_type) const;
	template <> _UCXXEXPORT string::size_type string::find_first_not_of(char c, size_type) const;

	template <> _UCXXEXPORT int string::compare(const string & str) const;
	template <> _UCXXEXPORT int string::compare(
		size_type pos1, size_type n1, const string & str, size_type pos2, size_type n2) const;

	template <> _UCXXEXPORT string string::substr(size_type pos, size_type n) const;

	template <> _UCXXEXPORT string & string::operator=(const string & str);
	template <> _UCXXEXPORT string & string::operator=(const char * s);

#endif
#endif




//typedef basic_string<char> string;

template<class charT, class traits> _UCXXEXPORT basic_string<charT,traits> 
	operator+(const basic_string<charT,traits>& lhs, const basic_string<charT,traits>& rhs)
{
	basic_string<charT,traits> temp(lhs);
	temp.append(rhs);
	return temp;
}

template<class charT, class traits> _UCXXEXPORT basic_string<charT,traits>
	operator+(const charT* lhs, const basic_string<charT,traits>& rhs)
{
	basic_string<charT,traits> temp(lhs);
	temp.append(rhs);
	return temp;
}


template<class charT, class traits> _UCXXEXPORT basic_string<charT,traits>
	operator+(charT lhs, const basic_string<charT,traits>& rhs)
{
	basic_string<charT,traits> temp(1, lhs);
	temp.append(rhs);
	return temp;
}

template<class charT, class traits> _UCXXEXPORT basic_string<charT,traits>
	operator+(const basic_string<charT,traits>& lhs, const charT* rhs)
{
	basic_string<charT,traits> temp(lhs);
	temp.append(rhs);
	return temp;
}

template<class charT, class traits> _UCXXEXPORT basic_string<charT,traits>
	operator+(const basic_string<charT,traits>& lhs, charT rhs)
{
	basic_string<charT,traits> temp(lhs);
	temp+=rhs;
	return temp;
}

template<class charT, class traits> _UCXXEXPORT bool 
	operator==(const basic_string<charT,traits>& lhs, const basic_string<charT,traits>& rhs)
{
	if(lhs.compare(rhs) == 0){
		return true;
	}
	return false;
}

template<class charT, class traits> _UCXXEXPORT bool 
	operator==(const charT* lhs, const basic_string<charT,traits>& rhs)
{
	if(rhs.compare(lhs) == 0){
		return true;
	}
	return false;
}

template<class charT, class traits> _UCXXEXPORT bool 
	operator==(const basic_string<charT,traits>& lhs, const charT* rhs)
{
	if(lhs.compare(rhs)==0){
		return true;
	}
	return false;
}

template<class charT, class traits> _UCXXEXPORT bool 
	operator!=(const basic_string<charT,traits>& lhs, const basic_string<charT,traits>& rhs)
{
	if(lhs.compare(rhs) !=0){
		return true;
	}
	return false;
}

template<class charT, class traits> _UCXXEXPORT bool 
	operator!=(const charT* lhs, const basic_string<charT,traits>& rhs)
{
	basic_string<charT,traits> temp(lhs);
	return (temp != rhs);
}

template<class charT, class traits> _UCXXEXPORT bool 
	operator!=(const basic_string<charT,traits>& lhs, const charT* rhs)
{
	basic_string<charT,traits> temp(rhs);
	return (lhs != temp);
}

template<class charT, class traits> _UCXXEXPORT bool 
	operator< (const basic_string<charT,traits>& lhs, const basic_string<charT,traits>& rhs)
{
	if(lhs.compare(rhs) < 0){
		return true;
	}
	return false;
}

template<class charT, class traits> _UCXXEXPORT bool 
	operator< (const basic_string<charT,traits>& lhs, const charT* rhs)
{
	basic_string<charT,traits> temp(rhs);
	if(lhs.compare(rhs) < 0){
		return true;
	}
	return false;
}

template<class charT, class traits> _UCXXEXPORT bool 
	operator< (const charT* lhs, const basic_string<charT,traits>& rhs)
{
	basic_string<charT,traits> temp(lhs);
	if(temp.compare(rhs) < 0){
		return true;
	}
	return false;
}


template<class charT, class traits> _UCXXEXPORT bool 
	operator> (const basic_string<charT,traits>& lhs, const basic_string<charT,traits>& rhs)
{
	if(lhs.compare(rhs) > 0){
		return true;
	}
	return false;
}

template<class charT, class traits> _UCXXEXPORT bool 
	operator> (const basic_string<charT,traits>& lhs, const charT* rhs)
{
	basic_string<charT,traits> temp(rhs);
	if(lhs.compare(rhs) > 0){
		return true;
	}
	return false;
}

template<class charT, class traits> _UCXXEXPORT bool 
	operator> (const charT* lhs, const basic_string<charT,traits>& rhs)
{
	basic_string<charT,traits> temp(lhs);
	if(temp.compare(rhs) > 0){
		return true;
	}
	return false;
}

template<class charT, class traits> _UCXXEXPORT bool 
	operator<=(const basic_string<charT,traits>& lhs, const basic_string<charT,traits>& rhs)
{
	if(lhs.compare(rhs) <=0){
		return true;
	}
	return false;
}

template<class charT, class traits> _UCXXEXPORT bool 
	operator<=(const basic_string<charT,traits>& lhs, const charT* rhs)
{
	basic_string<charT,traits> temp(rhs);
	if(lhs.compare(temp) <=0 ){
		return true;
	}
	return false;
}

template<class charT, class traits> _UCXXEXPORT bool 
	operator<=(const charT* lhs, const basic_string<charT,traits>& rhs)
{
	basic_string<charT,traits> temp(lhs);
	if(temp.compare(rhs) <= 0){
		return true;
	}
	return false;
}

template<class charT, class traits> _UCXXEXPORT bool 
	operator>=(const basic_string<charT,traits>& lhs, const basic_string<charT,traits>& rhs)
{
	if(lhs.compare(rhs) >=0){
		return true;
	}
	return false;
}

template<class charT, class traits> _UCXXEXPORT bool 
	operator>=(const basic_string<charT,traits>& lhs, const charT* rhs)
{
	basic_string<charT,traits> temp(rhs);
	if(lhs.compare(temp) >=0 ){
		return true;
	}
	return false;
}

template<class charT, class traits> _UCXXEXPORT bool 
	operator>=(const charT* lhs, const basic_string<charT,traits>& rhs)
{
	basic_string<charT,traits> temp(lhs);
	if(temp.compare(rhs) >=0 ){
		return true;
	}
	return false;
}

template<class charT, class traits> _UCXXEXPORT void 
	swap(basic_string<charT,traits>& lhs, basic_string<charT,traits>& rhs)
{
	lhs.swap(rhs);
}

/*template<class charT, class traits> _UCXXEXPORT basic_ostream<charT, traits>&
	operator<<(basic_ostream<charT, traits>& os, const basic_string<charT,traits>& str)
{
	return os.write(str.data(), str.length());
}*/

#ifdef __UCLIBCXX_EXPAND_STRING_CHAR__
#ifndef __UCLIBCXX_COMPILE_STRING__

//Operators we can avoid duplication of

template <> _UCXXEXPORT bool operator==(const string & lhs, const string & rhs);
template <> _UCXXEXPORT bool operator==(const char * lhs, const string & rhs);
template <> _UCXXEXPORT bool operator==(const string & rhs, const char * rhs);

template <> _UCXXEXPORT bool operator!=(const string & lhs, const string & rhs);
template <> _UCXXEXPORT bool operator!=(const char * lhs, const string & rhs);
template <> _UCXXEXPORT bool operator!=(const string & rhs, const char * rhs);

template <> _UCXXEXPORT string operator+(const string & lhs, const char* rhs);
template <> _UCXXEXPORT string operator+(const char* lhs, const string & rhs);
template <> _UCXXEXPORT string operator+(const string & lhs, const string & rhs);

template <> _UCXXEXPORT bool operator> (const string & lhs, const string & rhs);
template <> _UCXXEXPORT bool operator< (const string & lhs, const string & rhs);


#endif
#endif


}

#pragma GCC visibility pop

#endif
