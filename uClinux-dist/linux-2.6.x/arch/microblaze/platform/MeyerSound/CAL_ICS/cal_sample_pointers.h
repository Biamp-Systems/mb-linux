/*
 *  linux/arch/microblaze/platform/MeyerSound/CAL_ICS/cal_sample_pointers.h
 *
 *  Lab X Technologies AVB CAL_ICS data streams routing driver
 *
 *  Written by Yi Cao (yi.cao@labxtechnologies.com)
 *
 *  Copyright (C) 2011 Meyer Sound Laboratories Inc, All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
 
#ifndef _CAL_SAMPLE_POINTERS_H_
#define _CAL_SAMPLE_POINTERS_H_

#include <linux/cdev.h>
#include <linux/fs.h>
#include <linux/highmem.h>
#include <linux/ioport.h>
#include <linux/types.h>
#include <linux/wait.h>
#include <linux/ioctl.h>
#include <net/cal_ics_routing.h>


#define NUM_HOST_IRQS   1
#define IRQ_ERROR_BIT   0
    
/* Output channel select registers */ 
#define HOST_IRQ_MASK_REG       (0x00)
#define HOST_IRQ_FLAGS_REG      (0x01) 
#define DSP1_CHAN1_SEL_REG      (0x02)
#define DSP1_CHAN2_SEL_REG      (0x03)
#define DSP1_CHAN3_SEL_REG      (0x04)
#define DSP2_CHAN1_SEL_REG      (0x05)
#define DSP2_CHAN2_SEL_REG      (0x06)
#define DSP2_CHAN3_SEL_REG      (0x07)
#define AES_CHAN1_SEL_REG       (0x08)
#define AES_CHAN2_SEL_REG       (0x09)
#define SCARF1_CHAN1_SEL_REG    (0x0A)
#define SCARF1_CHAN2_SEL_REG    (0x0B)
#define SCARF2_CHAN1_SEL_REG    (0x0C)
#define SCARF2_CHAN2_SEL_REG    (0x0D)
#define SCARF3_CHAN1_SEL_REG    (0x0E)
#define SCARF3_CHAN2_SEL_REG    (0x0F)
#define AVB_CHAN1_SEL_REG       (0x10)
#define AVB_CHAN2_SEL_REG       (0x11)
#define AVB_CHAN3_SEL_REG       (0x12)
#define AVB_CHAN4_SEL_REG       (0x13)
  
/* Output read offset registers */  
#define DSP1_CHAN1_READ_OFFSET_REG   (0x14)
#define DSP1_CHAN2_READ_OFFSET_REG   (0x15)
#define DSP1_CHAN3_READ_OFFSET_REG   (0x16)
#define DSP2_CHAN1_READ_OFFSET_REG   (0x17)
#define DSP2_CHAN2_READ_OFFSET_REG   (0x18)
#define DSP2_CHAN3_READ_OFFSET_REG   (0x19)
#define AES_CHAN1_READ_OFFSET_REG    (0x1A)
#define AES_CHAN2_READ_OFFSET_REG    (0x1B)
#define SCARF1_CHAN1_READ_OFFSET_REG (0x1C)
#define SCARF1_CHAN2_READ_OFFSET_REG (0x1D)
#define SCARF2_CHAN1_READ_OFFSET_REG (0x1E)
#define SCARF2_CHAN2_READ_OFFSET_REG (0x1F)
#define SCARF3_CHAN1_READ_OFFSET_REG (0x20)
#define SCARF3_CHAN2_READ_OFFSET_REG (0x21)
#define AVB_CHAN1_READ_OFFSET_REG    (0x22)
#define AVB_CHAN2_READ_OFFSET_REG    (0x23)
#define AVB_CHAN3_READ_OFFSET_REG    (0x24)
#define AVB_CHAN4_READ_OFFSET_REG    (0x25)

/* Soft Mute Control */
#define MUTE_CTRL_REG                (0x26)
#define AVB_STREAM_CHAN_REG          (0x27)
#define AVB_RATE_SELECT_REG          (0x28)
#define MUTE_COEFF_REG_BASE_ADDRESS  (0x100)


const uint16_t MUTE_COEFF_TABLE[COEFF_TABLE_MAX_NUM][256] = { 
      {//0x0080, 0x0100, 0x0180, 0x0200, 0x0280, 0x0300, 0x0380, 0x0400, 0x0480, 0x0500, 0x0580, 0x0600, 0x0680, 0x0700, 0x0780, 0x0800,
       0x0000, 0x0002, 0x0004, 0x0006, 0x0008, 0x000A, 0x000C, 0x0010, 0x0020, 0x0030, 0x0040, 0x0050, 0x0060, 0x0070, 0x0080, 0x0090,
       0x0880, 0x0900, 0x0980, 0x0A00, 0x0A80, 0x0B00, 0x0B80, 0x0C00, 0x0C80, 0x0D00, 0x0D80, 0x0E00, 0x0E80, 0x0F00, 0x0F80, 0x1000,
       0x1080, 0x1100, 0x1180, 0x1200, 0x1280, 0x1300, 0x1380, 0x1400, 0x1480, 0x1500, 0x1580, 0x1600, 0x1680, 0x1700, 0x1780, 0x1800,
       0x1880, 0x1900, 0x1980, 0x1A00, 0x1A80, 0x1B00, 0x1B80, 0x1C00, 0x1C80, 0x1D00, 0x1D80, 0x1E00, 0x1E80, 0x1F00, 0x1F80, 0x2000,
       0x2080, 0x2100, 0x2180, 0x2200, 0x2280, 0x2300, 0x2380, 0x2400, 0x2480, 0x2500, 0x2580, 0x2600, 0x2680, 0x2700, 0x2780, 0x2800,
       0x2880, 0x2900, 0x2980, 0x2A00, 0x2A80, 0x2B00, 0x2B80, 0x2C00, 0x2C80, 0x2D00, 0x2D80, 0x2E00, 0x2E80, 0x2F00, 0x2F80, 0x3000,
       0x3080, 0x3100, 0x3180, 0x3200, 0x3280, 0x3300, 0x3380, 0x3400, 0x3480, 0x3500, 0x3580, 0x3600, 0x3680, 0x3700, 0x3780, 0x3800,       
       0x3880, 0x3900, 0x3980, 0x3A00, 0x3A80, 0x3B00, 0x3B80, 0x3C00, 0x3C80, 0x3D00, 0x3D80, 0x3E00, 0x3E80, 0x3F00, 0x3F80, 0x4000,
       0x4080, 0x4100, 0x4180, 0x4200, 0x4280, 0x4300, 0x4380, 0x4400, 0x4480, 0x4500, 0x4580, 0x4600, 0x4680, 0x4700, 0x4780, 0x4800,
       0x4880, 0x4900, 0x4980, 0x4A00, 0x4A80, 0x4B00, 0x4B80, 0x4C00, 0x4C80, 0x4D00, 0x4D80, 0x4E00, 0x4E80, 0x4F00, 0x4F80, 0x5000,
       0x5080, 0x5100, 0x5180, 0x5200, 0x5280, 0x5300, 0x5380, 0x5400, 0x5480, 0x5500, 0x5580, 0x5600, 0x5680, 0x5700, 0x5780, 0x5800,
       0x5880, 0x5900, 0x5980, 0x5A00, 0x5A80, 0x5B00, 0x5B80, 0x5C00, 0x5C80, 0x5D00, 0x5D80, 0x5E00, 0x5E80, 0x5F00, 0x5F80, 0x6000,
       0x6080, 0x6100, 0x6180, 0x6200, 0x6280, 0x6300, 0x6380, 0x6400, 0x6480, 0x6500, 0x6580, 0x6600, 0x6680, 0x6700, 0x6780, 0x6800,
       0x6880, 0x6900, 0x6980, 0x6A00, 0x6A80, 0x6B00, 0x6B80, 0x6C00, 0x6C80, 0x6D00, 0x6D80, 0x6E00, 0x6E80, 0x6F00, 0x6F80, 0x7000,
       0x7080, 0x7100, 0x7180, 0x7200, 0x7280, 0x7300, 0x7380, 0x7400, 0x7480, 0x7500, 0x7580, 0x7600, 0x7680, 0x7700, 0x7780, 0x7800,
       0x7880, 0x7900, 0x7980, 0x7A00, 0x7A80, 0x7B00, 0x7B80, 0x7C00, 0x7C80, 0x7D00, 0x7D80, 0x7E00, 0x7E80, 0x7F00, 0x7F80, 0x8000      
       },
       {//0x0080, 0x0100, 0x0180, 0x0200, 0x0280, 0x0300, 0x0380, 0x0400, 0x0480, 0x0500, 0x0580, 0x0600, 0x0680, 0x0700, 0x0780, 0x0800,
       0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
       0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
       0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
       0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
       0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
       0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
       0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
       0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
       0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
       0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
       0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
       0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
       0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
       0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
       0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
       0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000
       },
       {//0x0080, 0x0100, 0x0180, 0x0200, 0x0280, 0x0300, 0x0380, 0x0400, 0x0480, 0x0500, 0x0580, 0x0600, 0x0680, 0x0700, 0x0780, 0x0800,
       0x0000, 0x0002, 0x0004, 0x0006, 0x0008, 0x000A, 0x000C, 0x0010, 0x0020, 0x0030, 0x0040, 0x0050, 0x0060, 0x0070, 0x0080, 0x0090,
       0x0880, 0x0900, 0x0980, 0x0A00, 0x0A80, 0x0B00, 0x0B80, 0x0C00, 0x0C80, 0x0D00, 0x0D80, 0x0E00, 0x0E80, 0x0F00, 0x0F80, 0x1000,
       0x1080, 0x1100, 0x1180, 0x1200, 0x1280, 0x1300, 0x1380, 0x1400, 0x1480, 0x1500, 0x1580, 0x1600, 0x1680, 0x1700, 0x1780, 0x1800,
       0x1880, 0x1900, 0x1980, 0x1A00, 0x1A80, 0x1B00, 0x1B80, 0x1C00, 0x1C80, 0x1D00, 0x1D80, 0x1E00, 0x1E80, 0x1F00, 0x1F80, 0x2000,
       0x2080, 0x2100, 0x2180, 0x2200, 0x2280, 0x2300, 0x2380, 0x2400, 0x2480, 0x2500, 0x2580, 0x2600, 0x2680, 0x2700, 0x2780, 0x2800,
       0x2880, 0x2900, 0x2980, 0x2A00, 0x2A80, 0x2B00, 0x2B80, 0x2C00, 0x2C80, 0x2D00, 0x2D80, 0x2E00, 0x2E80, 0x2F00, 0x2F80, 0x3000,
       0x3080, 0x3100, 0x3180, 0x3200, 0x3280, 0x3300, 0x3380, 0x3400, 0x3480, 0x3500, 0x3580, 0x3600, 0x3680, 0x3700, 0x3780, 0x3800,       
       0x3880, 0x3900, 0x3980, 0x3A00, 0x3A80, 0x3B00, 0x3B80, 0x3C00, 0x3C80, 0x3D00, 0x3D80, 0x3E00, 0x3E80, 0x3F00, 0x3F80, 0x4000,
       0x4080, 0x4100, 0x4180, 0x4200, 0x4280, 0x4300, 0x4380, 0x4400, 0x4480, 0x4500, 0x4580, 0x4600, 0x4680, 0x4700, 0x4780, 0x4800,
       0x4880, 0x4900, 0x4980, 0x4A00, 0x4A80, 0x4B00, 0x4B80, 0x4C00, 0x4C80, 0x4D00, 0x4D80, 0x4E00, 0x4E80, 0x4F00, 0x4F80, 0x5000,
       0x5080, 0x5100, 0x5180, 0x5200, 0x5280, 0x5300, 0x5380, 0x5400, 0x5480, 0x5500, 0x5580, 0x5600, 0x5680, 0x5700, 0x5780, 0x5800,
       0x5880, 0x5900, 0x5980, 0x5A00, 0x5A80, 0x5B00, 0x5B80, 0x5C00, 0x5C80, 0x5D00, 0x5D80, 0x5E00, 0x5E80, 0x5F00, 0x5F80, 0x6000,
       0x6080, 0x6100, 0x6180, 0x6200, 0x6280, 0x6300, 0x6380, 0x6400, 0x6480, 0x6500, 0x6580, 0x6600, 0x6680, 0x6700, 0x6780, 0x6800,
       0x6880, 0x6900, 0x6980, 0x6A00, 0x6A80, 0x6B00, 0x6B80, 0x6C00, 0x6C80, 0x6D00, 0x6D80, 0x6E00, 0x6E80, 0x6F00, 0x6F80, 0x7000,
       0x7080, 0x7100, 0x7180, 0x7200, 0x7280, 0x7300, 0x7380, 0x7400, 0x7480, 0x7500, 0x7580, 0x7600, 0x7680, 0x7700, 0x7780, 0x7800,
       0x7880, 0x7900, 0x7980, 0x7A00, 0x7A80, 0x7B00, 0x7B80, 0x7C00, 0x7C80, 0x7D00, 0x7D80, 0x7E00, 0x7E80, 0x7F00, 0x7F80, 0x8000      
       },
     };

/* Xilinx FPGA related */
#define REGISTER_ADDRESS(device, offset) \
  ((uintptr_t)(device)->virtualAddress | ((offset) << 2))

        

/* channel address in the FPGA sample memory */
#define AVB_1_CHAN_ADDR (0x0)
#define AVB_2_CHAN_ADDR (0x1)
#define AVB_3_CHAN_ADDR (0x2)
#define AVB_4_CHAN_ADDR (0x3)
#define AES_1_CHAN_ADDR (0x4)
#define AES_2_CHAN_ADDR (0x5)
#define ADC1_1_CHAN_ADDR (0x6)
#define ADC1_2_CHAN_ADDR (0x7)
#define ADC2_1_CHAN_ADDR (0x8)
#define ADC2_2_CHAN_ADDR (0x9)
#define DSP1_1_CHAN_ADDR (0xA)
#define DSP1_2_CHAN_ADDR (0xB)
#define DSP1_3_CHAN_ADDR (0xC)
#define DSP2_1_CHAN_ADDR (0xD)
#define DSP2_2_CHAN_ADDR (0xE)
#define DSP2_3_CHAN_ADDR (0xF)        
  
/* Driver structure to maintain state for each device instance */
#define NAME_MAX_SIZE    (256)
#define NO_IRQ_SUPPLIED   (-1)      
struct sample_pointers {
  /* Pointer back to the platform device */
  struct platform_device *pdev;

  /* Version information read from the hardware */
  uint32_t versionMajor;
  uint32_t versionMinor;

  /* Character device data */
  struct cdev cdev;
  dev_t       deviceNumber;
  uint32_t    instanceNumber;

  /* Name for use in identification */
  char name[NAME_MAX_SIZE];

  /* Physical and virtual base address */
  uintptr_t      physicalAddress;
  uintptr_t      addressRangeSize;
  void __iomem  *virtualAddress;

  /* Interrupt request number */
  int32_t irq;

  /* Mutex for the device instance */
  spinlock_t mutex;
  int32_t opened;

  /* File operations and private data for a polymorphic
   * driver to use
   */
  struct file_operations *derivedFops;
  void *derivedData;
};

#endif
